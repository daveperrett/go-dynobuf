// Code generated by protoc-gen-go.
// source: metric_state.proto
// DO NOT EDIT!

package dynobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MetricState struct {
	Timestamp     int64             `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ApplicationId string            `protobuf:"bytes,2,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Process       string            `protobuf:"bytes,3,opt,name=process" json:"process,omitempty"`
	Cluster       string            `protobuf:"bytes,4,opt,name=cluster" json:"cluster,omitempty"`
	Metric        string            `protobuf:"bytes,5,opt,name=metric" json:"metric,omitempty"`
	NumValues     int64             `protobuf:"varint,6,opt,name=num_values,json=numValues" json:"num_values,omitempty"`
	Sum           float64           `protobuf:"fixed64,7,opt,name=sum" json:"sum,omitempty"`
	Min           float64           `protobuf:"fixed64,8,opt,name=min" json:"min,omitempty"`
	Max           float64           `protobuf:"fixed64,9,opt,name=max" json:"max,omitempty"`
	SumOfSquares  float64           `protobuf:"fixed64,10,opt,name=sum_of_squares,json=sumOfSquares" json:"sum_of_squares,omitempty"`
	Tags          map[string]string `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetricState) Reset()                    { *m = MetricState{} }
func (m *MetricState) String() string            { return proto.CompactTextString(m) }
func (*MetricState) ProtoMessage()               {}
func (*MetricState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *MetricState) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricState)(nil), "dynobuf.MetricState")
}

func init() { proto.RegisterFile("metric_state.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x91, 0x4d, 0x4b, 0xf4, 0x30,
	0x14, 0x85, 0xe9, 0x74, 0x3e, 0xde, 0xde, 0x79, 0x1d, 0x24, 0xf8, 0x11, 0x44, 0x65, 0x10, 0x85,
	0x59, 0x75, 0x31, 0x2e, 0x14, 0x97, 0x82, 0x0b, 0x17, 0x22, 0x74, 0xc4, 0x6d, 0xc9, 0x74, 0x52,
	0x09, 0x36, 0x4d, 0x6d, 0x12, 0x99, 0xfe, 0x01, 0x7f, 0xb7, 0x37, 0x49, 0xd5, 0xd9, 0xdd, 0xfb,
	0x9c, 0x43, 0xcf, 0xed, 0x09, 0x10, 0xc9, 0x4d, 0x2b, 0x8a, 0x5c, 0x1b, 0x66, 0x78, 0xda, 0xb4,
	0xca, 0x28, 0x32, 0xd9, 0x74, 0xb5, 0x5a, 0xdb, 0xf2, 0xe2, 0x2b, 0x86, 0xe9, 0x93, 0xd7, 0x57,
	0x4e, 0x26, 0xa7, 0x90, 0x18, 0x21, 0x39, 0x7a, 0x65, 0x43, 0xa3, 0x79, 0xb4, 0x88, 0xb3, 0x3f,
	0x40, 0xae, 0x60, 0xc6, 0x9a, 0xa6, 0x12, 0x05, 0x33, 0x42, 0xd5, 0xb9, 0xd8, 0xd0, 0x01, 0x5a,
	0x92, 0x6c, 0x6f, 0x87, 0x3e, 0x6e, 0x08, 0x85, 0x09, 0xc6, 0x14, 0x5c, 0x6b, 0x1a, 0x7b, 0xfd,
	0x67, 0x75, 0x4a, 0x51, 0x59, 0x6d, 0x78, 0x4b, 0x87, 0x41, 0xe9, 0x57, 0x72, 0x04, 0xe3, 0x70,
	0x27, 0x1d, 0x79, 0xa1, 0xdf, 0xc8, 0x19, 0x40, 0x6d, 0x65, 0xfe, 0xc9, 0x2a, 0xcb, 0x35, 0x1d,
	0x87, 0x8b, 0x90, 0xbc, 0x7a, 0x40, 0xf6, 0x21, 0xd6, 0x56, 0xd2, 0x09, 0xf2, 0x28, 0x73, 0xa3,
	0x23, 0x52, 0xd4, 0xf4, 0x5f, 0x20, 0x38, 0x7a, 0xc2, 0xb6, 0x34, 0xe9, 0x09, 0xdb, 0x92, 0x4b,
	0x98, 0xa1, 0x35, 0x57, 0x65, 0xae, 0x3f, 0x2c, 0x6b, 0xf1, 0xc3, 0xe0, 0xc5, 0xff, 0x48, 0x9f,
	0xcb, 0x55, 0x60, 0x64, 0x09, 0x43, 0xc3, 0xde, 0x34, 0x9d, 0xce, 0xe3, 0xc5, 0x74, 0x79, 0x9e,
	0xf6, 0x9d, 0xa5, 0x3b, 0x7d, 0xa5, 0x2f, 0x68, 0x78, 0xa8, 0x4d, 0xdb, 0x65, 0xde, 0x7b, 0x72,
	0x03, 0xc9, 0x2f, 0x72, 0xc1, 0xef, 0xbc, 0xf3, 0x35, 0x26, 0x99, 0x1b, 0xc9, 0x01, 0x8c, 0xfc,
	0x9f, 0xf4, 0xbd, 0x85, 0xe5, 0x6e, 0x70, 0x1b, 0xdd, 0x1f, 0xc3, 0xa1, 0x50, 0x3e, 0x42, 0x62,
	0x8d, 0x45, 0x78, 0x27, 0x4c, 0x5b, 0x8f, 0xfd, 0x74, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x64,
	0x06, 0x41, 0xe2, 0xc7, 0x01, 0x00, 0x00,
}
