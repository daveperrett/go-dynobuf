// Code generated by protoc-gen-go.
// source: metric_data_point.proto
// DO NOT EDIT!

package dynobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MetricDataPoint struct {
	ApplicationId string            `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Process       string            `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Cluster       string            `protobuf:"bytes,3,opt,name=cluster" json:"cluster,omitempty"`
	Metric        string            `protobuf:"bytes,4,opt,name=metric" json:"metric,omitempty"`
	Operation     string            `protobuf:"bytes,5,opt,name=operation" json:"operation,omitempty"`
	Value         float64           `protobuf:"fixed64,6,opt,name=value" json:"value,omitempty"`
	Tags          map[string]string `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp     int64             `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MetricDataPoint) Reset()                    { *m = MetricDataPoint{} }
func (m *MetricDataPoint) String() string            { return proto.CompactTextString(m) }
func (*MetricDataPoint) ProtoMessage()               {}
func (*MetricDataPoint) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MetricDataPoint) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricDataPoint)(nil), "dynobuf.MetricDataPoint")
}

func init() { proto.RegisterFile("metric_data_point.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4a, 0xf4, 0x30,
	0x14, 0xc5, 0x69, 0x3b, 0xd3, 0x7e, 0xbd, 0x1f, 0xfe, 0x21, 0xa8, 0x13, 0xc4, 0xc5, 0x30, 0x20,
	0xcc, 0xaa, 0x0b, 0x05, 0x15, 0x97, 0xa2, 0x0b, 0x17, 0x82, 0x14, 0xf7, 0x25, 0x93, 0x46, 0x09,
	0xb6, 0x4d, 0x48, 0x6e, 0x85, 0x3e, 0xa1, 0xaf, 0x65, 0x9a, 0x54, 0x2b, 0xee, 0xee, 0xb9, 0xbf,
	0xd3, 0xdb, 0x73, 0x02, 0xab, 0x56, 0xa0, 0x91, 0xbc, 0xaa, 0x19, 0xb2, 0x4a, 0x2b, 0xd9, 0x61,
	0xa1, 0x8d, 0x42, 0x45, 0xb2, 0x7a, 0xe8, 0xd4, 0xae, 0x7f, 0xdd, 0x7c, 0xc6, 0x70, 0xf0, 0xe4,
	0x4d, 0xf7, 0xce, 0xf3, 0x3c, 0x5a, 0xc8, 0x39, 0xec, 0x33, 0xad, 0x1b, 0xc9, 0x19, 0x4a, 0xd5,
	0x55, 0xb2, 0xa6, 0xd1, 0x3a, 0xda, 0xe6, 0xe5, 0xde, 0xaf, 0xed, 0x63, 0x4d, 0x28, 0x64, 0xee,
	0x18, 0x17, 0xd6, 0xd2, 0xd8, 0xf3, 0x6f, 0x39, 0x12, 0xde, 0xf4, 0x16, 0x85, 0xa1, 0x49, 0x20,
	0x93, 0x24, 0x27, 0x90, 0x86, 0x48, 0x74, 0xe1, 0xc1, 0xa4, 0xc8, 0x19, 0xe4, 0x4a, 0x0b, 0xe3,
	0x4f, 0xd3, 0xa5, 0x47, 0xf3, 0x82, 0x1c, 0xc1, 0xf2, 0x83, 0x35, 0xbd, 0xa0, 0xa9, 0x23, 0x51,
	0x19, 0x04, 0xb9, 0x82, 0x05, 0xb2, 0x37, 0x4b, 0xb3, 0x75, 0xb2, 0xfd, 0x7f, 0xb1, 0x29, 0xa6,
	0x4a, 0xc5, 0x9f, 0x3a, 0xc5, 0x8b, 0x33, 0x3d, 0x74, 0x68, 0x86, 0xd2, 0xfb, 0xc7, 0x7f, 0xa1,
	0x6c, 0x85, 0x45, 0xd6, 0x6a, 0xfa, 0xcf, 0x5d, 0x4c, 0xca, 0x79, 0x71, 0x7a, 0x0d, 0xf9, 0xcf,
	0x07, 0xe4, 0x10, 0x92, 0x77, 0x31, 0x4c, 0xf5, 0xc7, 0x71, 0x8e, 0x12, 0x2a, 0x07, 0x71, 0x1b,
	0xdf, 0x44, 0x77, 0x2b, 0x38, 0x96, 0xca, 0x87, 0x68, 0x5d, 0x6a, 0x1e, 0x1e, 0xda, 0xe5, 0xd9,
	0xa5, 0x7e, 0xba, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xd2, 0xfe, 0x92, 0x8d, 0x01, 0x00,
	0x00,
}
